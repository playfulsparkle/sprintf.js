/*! @playfulsparkle/sprintf-js v1.0.0 | Copyright (c) 2025-present, Zsolt Oroszl√°ny <hello@playfulsparkle.com> | BSD-3-Clause */
(()=>{let u={notType:/[^T]/,notPrimitive:/[^v]/,number:/[diefg]/,numericArg:/[bcdiefguxX]/,jsonObject:/[j]/,plainText:/^[^\x25]+/,doublePercent:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,namedKey:/^([a-z_][a-z_\d]*)/i,dotAccess:/^\.([a-z_][a-z_\d]*)/i,bracketAccess:/^\[(\d+)\]/,numeralPrefix:/^[+-]/,allowedNamedKeyChars:/^[a-zA-Z_][a-zA-Z0-9_]*$/,allowedNumericIndex:/^\d+$/},f=new Map;function t(e){e=(e=>{if(f.has(e))return f.get(e);let r=e,n=[],a=!1,s=!1;for(;r;){let t;if(null!==(t=u.plainText.exec(r)))n.push(t[0]);else if(null!==(t=u.doublePercent.exec(r)))n.push("%");else{if(null===(t=u.placeholder.exec(r)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){a=!0;var i=[];let e=t[2],r;if(null===(r=u.namedKey.exec(e)))throw new SyntaxError("[sprintf] failed to parse named argument key");if(!u.allowedNamedKeyChars.test(r[1]))throw new SyntaxError("[sprintf] Invalid named argument key segment: must start with a letter or underscore, followed by letters, numbers, or underscores");for(i.push(r[1]);""!==(e=e.substring(r[0].length));){if(null!==(r=u.dotAccess.exec(e))){if(!u.allowedNamedKeyChars.test(r[1]))throw new SyntaxError("[sprintf] Invalid named argument key segment after dot: must start with a letter or underscore, followed by letters, numbers, or underscores")}else{if(null===(r=u.bracketAccess.exec(e)))throw new SyntaxError("[sprintf] failed to parse named argument key");if(!u.allowedNumericIndex.test(r[1]))throw new SyntaxError("[sprintf] Invalid array index in named argument key: must be a non-negative integer")}i.push(r[1])}t[2]=i}else s=(t[1],!0);n.push({placeholder:t[0],paramNo:t[1],keys:t[2],numeralPrefix:t[3],padChar:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}r=r.substring(t[0].length)}var t={parseTree:n,namedUsed:a,positionalUsed:s};return f.set(e,t),t})(e);{var i=e.parseTree,o=Array.from(arguments).slice(1);e=e.namedUsed;let n=0,r=i.length,a=Object.create(null),s="",t=[];if(e){for(let e=0;e<o.length;e++)null===o[e]||"object"!=typeof o[e]||Array.isArray(o[e])?t.push(o[e]):Object.assign(a,o[e]);o=t}for(let e=0;e<r;e++){var l,p,c=i[e];if("string"==typeof c)s+=c;else{let r;if(c.keys){r=a;for(let e=0;e<c.keys.length;e++){var d=c.keys[e];if(null==r)throw new Error(`[sprintf] Cannot access property "${d}" of undefined value`);r=r[d]}}else r=c.paramNo?o[c.paramNo-1]:o[n++];if(u.numericArg.test(c.type)&&"number"!=typeof r&&isNaN(r))throw new TypeError("[sprintf] expecting number but found "+typeof r);let e,t="";switch(u.number.test(c.type)&&(e=0<=r),c.type){case"b":r=parseInt(r,10).toString(2);break;case"c":r=String.fromCharCode(parseInt(r,10));break;case"d":case"i":r=parseInt(r,10);break;case"j":r=JSON.stringify(r,null,c.width?parseInt(c.width):0);break;case"e":r=c.precision?parseFloat(r).toExponential(c.precision):parseFloat(r).toExponential();break;case"f":r=c.precision?parseFloat(r).toFixed(c.precision):parseFloat(r);break;case"g":r=c.precision?String(Number(r.toPrecision(c.precision))):parseFloat(r);break;case"o":r=(parseInt(r,10)>>>0).toString(8);break;case"s":r=String(r),r=c.precision?r.substring(0,c.precision):r;break;case"t":r=String(!!r),r=c.precision?r.substring(0,c.precision):r;break;case"T":r=Object.prototype.toString.call(r).slice(8,-1).toLowerCase(),r=c.precision?r.substring(0,c.precision):r;break;case"u":r=parseInt(r,10)>>>0;break;case"v":r=String(r.valueOf()),r=c.precision?r.substring(0,c.precision):r;break;case"x":r=(parseInt(r,10)>>>0).toString(16);break;case"X":r=(parseInt(r,10)>>>0).toString(16).toUpperCase();break;default:throw new Error("[sprintf] Unknown type: "+c.type)}u.jsonObject.test(c.type)?s+=r:(!u.number.test(c.type)||e&&!c.numeralPrefix||(t=e?"+":"-",r=String(r).replace(u.numeralPrefix,"")),l=c.padChar?"0"===c.padChar?"0":c.padChar.charAt(1):" ",p=c.width-(t+r).length,p=c.width&&0<p?l.repeat(p):"",s+=c.align?t+r+p:"0"===l?t+p+r:p+t+r)}}return s}}function e(e,r){return t.apply(null,[e].concat(r||[]))}let r={sprintf:t,vsprintf:e};"undefined"!=typeof window&&(window.sprintf=t,window.vsprintf=e,"function"==typeof define)&&define.amd&&define(()=>r),"undefined"!=typeof exports&&(exports.sprintf=t,exports.vsprintf=e),"undefined"!=typeof module&&module.exports&&(module.exports=r)})();
//# sourceMappingURL=sprintf.min.js.map
