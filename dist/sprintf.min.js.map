{"version":3,"sources":["sprintf.js"],"names":["re","notType","notPrimitive","number","numericArg","jsonObject","plainText","doublePercent","placeholder","namedKey","dotAccess","bracketAccess","numeralPrefix","allowedNamedKeyChars","allowedNumericIndex","defaultOptions","allowComputedValue","throwErrorOnUnmatched","preserveUnmatchedPlaceholder","sprintfCache","let","cache","__proto__","get","key","set","value","this","has","delete","clear","sprintf","format","options","_sprintfOptions","stats","_sprintfStats","parseResult","sprintfParse","sprintfFormat","parseTree","Array","prototype","slice","call","arguments","namedUsed","vsprintf","argv","fmt","apply","concat","config","newOptions","objectAssign","chainableConfig","totalPlaceholders","totalNamedPlaceholder","totalPositionalPlaceholder","totalSequentialPositionalPlaceholder","getStats","usesNamedArgs","cursor","treeLength","length","namedArgs","output","filteredArgv","idx","arg","Object","toString","push","pad","keys","k","placeholderKey","Error","undefined","SyntaxError","paramNo","paramIndex","test","type","e","isNaN","TypeError","isPositive","hex","parseInt","String","fromCharCode","Math","trunc","Number","JSON","stringify","width","precision","parseFloat","toExponential","toFixed","toPrecision","substring","toLowerCase","valueOf","high","padStart","highBits","BigInt","highHex","toUpperCase","replace","padCharacter","padChar","charAt","padLength","character","count","RangeError","result","align","_format","positionalUsed","match","exec","fieldList","replacementField","fieldMatch","target","source","hasOwnProperty","sprintfLib","window","define","amd","exports","module"],"mappings":"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","file":"sprintf.min.js","sourcesContent":["/* global BigInt, window, exports, define */\n\n!function () {\n    'use strict';\n\n    /**\n     * Regular expressions used for parsing format strings\n     * @namespace\n     */\n    const re = {\n        // Matches if type is NOT 'T' (type detection)\n        notType: /[^T]/,\n        // Matches if type is NOT 'v' (primitive value)\n        notPrimitive: /[^v]/,\n        // Matches numeric format specifiers\n        number: /[diefg]/,\n        // Matches numeric argument types requiring number validation\n        numericArg: /[bcdiefguxX]/,\n        // Matches JSON object specifier\n        jsonObject: /[j]/,\n        // Matches plain text between format specifiers\n        plainText: /^[^\\x25]+/,\n        // Matches double percent (escaped percent)\n        doublePercent: /^\\x25{2}/,\n        // Matches format placeholder components\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        // Matches valid named argument keys\n        namedKey: /^([a-z_][a-z_\\d]*)/i,\n        // Matches dot notation in named arguments\n        dotAccess: /^\\.([a-z_][a-z_\\d]*)/i,\n        // Matches array index access in named arguments\n        bracketAccess: /^\\[(\\d+)\\]/,\n        // Matches numeric sign prefixes\n        numeralPrefix: /^[+-]/,\n        allowedNamedKeyChars: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n        allowedNumericIndex: /^\\d+$/\n    };\n\n    const defaultOptions = {\n        allowComputedValue: false,\n        throwErrorOnUnmatched: false,\n        preserveUnmatchedPlaceholder: false,\n    };\n\n    /**\n     * Cache for parsed format strings to improve performance\n     * @type {Map<string, {parseTree: Array<string|Placeholder>, namedUsed: boolean, positionalUsed: boolean}>}\n     */\n    const sprintfCache = createCache(); // Optimized version of new Map();\n\n    /**\n     * @typedef {Object} Placeholder\n     * @property {string} placeholder - The entire matched placeholder string\n     * @property {string} [paramNo] - Positional parameter number (1-based index)\n     * @property {Array<string>} [keys] - Named parameter access path\n     * @property {string} [numeralPrefix] - '+' sign for positive numbers\n     * @property {string} [padChar] - Padding character (e.g., '0' or space)\n     * @property {boolean} [align] - Left-align flag (true when '-' present)\n     * @property {string} [width] - Minimum field width\n     * @property {string} [precision] - Precision for numbers/strings\n     * @property {string} type - Conversion type character\n     */\n\n    /**\n     * Main formatting function similar to C's sprintf\n     * @param {string} format - Format string containing placeholders\n     * @param {...*} args - Values to format\n     * @returns {string} Formatted string\n     * @throws {Error} On invalid arguments or formatting errors\n     */\n    function sprintf(format) {\n        const options = this && this._sprintfOptions ? this._sprintfOptions : defaultOptions;\n        const stats = this && this._sprintfStats ? this._sprintfStats : { __proto__: null };\n\n        const parseResult = sprintfParse(format);\n\n        // Extract args and format using current options\n        return sprintfFormat(parseResult.parseTree, Array.prototype.slice.call(arguments, 1), parseResult.namedUsed, options, stats);\n    }\n\n    /**\n     * Version of sprintf that accepts arguments as an array\n     * @param {string} format - Format string\n     * @param {Array} argv - Array of values to format\n     * @returns {string} Formatted string\n     */\n    function vsprintf(format, argv) {\n        const options = this && this._sprintfOptions ? this._sprintfOptions : defaultOptions;\n        const stats = this && this._sprintfStats ? this._sprintfStats : { __proto__: null };\n\n        // Create a temporary function with the current options\n        const tempSprintf = function (fmt) {\n            return sprintfFormat(sprintfParse(fmt).parseTree, Array.prototype.slice.call(arguments, 1), sprintfParse(fmt).namedUsed, options, stats);\n        };\n\n        return tempSprintf.apply(null, [format].concat(argv || []));\n    }\n\n    /**\n     * Creates a chainable configuration object for sprintf\n     * @param {Object} options - Configuration options\n     * @returns {Object} A chainable configuration object\n     */\n    function config(options) {\n        // Create a fresh configuration object by cloning defaultOptions\n        const newOptions = objectAssign({ __proto__: null }, defaultOptions);\n\n        // Apply passed options if any\n        if (options) {\n            if (typeof options.allowComputedValue === 'boolean') {\n                newOptions.allowComputedValue = options.allowComputedValue;\n            }\n            if (typeof options.throwErrorOnUnmatched === 'boolean') {\n                newOptions.throwErrorOnUnmatched = options.throwErrorOnUnmatched;\n            }\n            if (typeof options.preserveUnmatchedPlaceholder === 'boolean') {\n                newOptions.preserveUnmatchedPlaceholder = options.preserveUnmatchedPlaceholder;\n            }\n        }\n\n        // Create a chainable configuration object\n        const chainableConfig = {\n            _sprintfOptions: newOptions,\n            _sprintfStats: {\n                totalPlaceholders: 0,\n                totalNamedPlaceholder: 0,\n                totalPositionalPlaceholder: 0,\n                totalSequentialPositionalPlaceholder: 0\n            },\n\n            // Method to format with current config\n            sprintf: sprintf,\n            vsprintf: vsprintf,\n\n            getStats: function () {\n                return this._sprintfStats;\n            },\n\n            // Methods to modify configuration\n            allowComputedValue: function (value) {\n                this._sprintfOptions.allowComputedValue = !!value;\n                return this;\n            },\n\n            throwErrorOnUnmatched: function (value) {\n                this._sprintfOptions.throwErrorOnUnmatched = !!value;\n                return this;\n            },\n\n            preserveUnmatchedPlaceholder: function (value) {\n                this._sprintfOptions.preserveUnmatchedPlaceholder = !!value;\n                return this;\n            }\n        };\n\n        return chainableConfig;\n    }\n\n    /**\n     * Core formatting engine that processes parsed format tree\n     * @param {Array<string|Placeholder>} parseTree - Result from sprintfParse()\n     * @param {Array} argv - Values to format\n     * @param {boolean} usesNamedArgs - Whether format uses named arguments\n     * @param {Object} options - Configuration options\n     * @returns {string} Formatted string\n     * @throws {TypeError} On invalid numeric arguments\n     * @throws {Error} On missing named arguments\n     */\n    function sprintfFormat(parseTree, argv, usesNamedArgs, options, stats) {\n        // Because of removing __proto__ parsetree can be undefined\n        if (typeof parseTree === 'undefined') return '';\n\n        const MAX_UINT32 = 0xFFFFFFFF;\n        const MAX_INT32 = 0x7FFFFFFF;\n        const MIN_INT32 = -0x80000000;\n\n        let cursor = 0;\n        const treeLength = parseTree.length;\n        const namedArgs = { __proto__: null };\n        let output = '';\n\n        // Extract named arguments and filter positional arguments if named are used\n        const filteredArgv = [];\n\n        if (usesNamedArgs) {\n            for (let idx = 0; idx < argv.length; idx++) {\n                const arg = argv[idx];\n\n                if (\n                    arg !== null &&\n                    typeof arg === 'object' &&\n                    Object.prototype.toString.call(arg) !== '[object Array]'\n                ) { // Replace Array.isArray in favor of Object.prototype.toString.call(arg) === '[object Array]'\n                    objectAssign(namedArgs, arg);\n                } else {\n                    filteredArgv.push(arg);\n                }\n            }\n\n            // Use filteredArgv for positional parameters\n            argv = filteredArgv;\n        }\n\n        for (let idx = 0; idx < treeLength; idx++) {\n            const placeholder = parseTree[idx];\n\n            if (typeof placeholder === 'string') {\n                output += placeholder;\n\n                continue;\n            }\n\n            let arg;\n\n            stats.totalPlaceholders++;\n\n            // Get the argument value\n            if (placeholder.keys) { // keyword argument\n                arg = namedArgs;\n\n                for (let k = 0; k < placeholder.keys.length; k++) {\n                    const placeholderKey = placeholder.keys[k];\n\n                    if (arg === undefined || arg === null) {\n                        throw new Error(`[sprintf] Cannot access property \"${placeholderKey}\" of undefined value`);\n                    }\n\n                    arg = arg[placeholderKey];\n\n                    if (options.throwErrorOnUnmatched && arg === undefined) {\n                        throw new SyntaxError(`[sprintf] Missing argument ${placeholderKey}`);\n                    }\n\n                    if (options.preserveUnmatchedPlaceholder && arg === undefined) {\n                        arg = placeholder.placeholder;\n                    }\n\n                    stats.totalNamedPlaceholder++;\n                }\n\n            } else if (placeholder.paramNo) { // Explicit positional argument\n                const paramIndex = placeholder.paramNo - 1;\n\n                if (options.throwErrorOnUnmatched && paramIndex >= argv.length) {\n                    throw new SyntaxError(`[sprintf] Missing argument ${placeholder.paramNo}`);\n                }\n\n                arg = argv[paramIndex];\n\n                if (options.preserveUnmatchedPlaceholder && arg === undefined) {\n                    arg = placeholder.placeholder;\n                }\n\n                stats.totalPositionalPlaceholder++;\n            } else { // Implicit positional argument\n                if (options.throwErrorOnUnmatched && cursor >= argv.length) {\n                    throw new SyntaxError('[sprintf] Too few arguments');\n                }\n\n                arg = argv[cursor++];\n\n                if (options.preserveUnmatchedPlaceholder && arg === undefined) {\n                    arg = placeholder.placeholder;\n                }\n\n                stats.totalSequentialPositionalPlaceholder++;\n            }\n\n            // Handle function arguments for non-type/non-primitive specifiers\n            if (options.allowComputedValue) {\n                if (re.notType.test(placeholder.type) && re.notPrimitive.test(placeholder.type) && typeof arg === 'function') {\n                    try {\n                        arg = arg();\n                    } catch (e) {\n                        throw new Error('[sprintf] Failed to execute function argument');\n                    }\n                }\n            }\n\n            // Validate numeric arguments for numeric placeholders\n            if (re.numericArg.test(placeholder.type)) {\n                // Check if arg is a number, BigInt, or can be converted to a number\n                if (typeof arg !== 'number' && typeof arg !== 'bigint' && isNaN(arg)) { // eslint-disable-line valid-typeof\n                    throw new TypeError(`[sprintf] expecting number or BigInt but found ${typeof arg}`);\n                }\n            }\n\n            let isPositive;\n\n            let numeralPrefix = '';\n\n            let hex;\n\n            // Format according to type\n            if (re.number.test(placeholder.type)) {\n                isPositive = arg >= 0;\n            }\n\n            // Process argument based on format specifier\n            switch (placeholder.type) {\n                case 'b': // Binary\n                    arg = parseInt(arg, 10).toString(2);\n                    break;\n                case 'c': // Character\n                    arg = String.fromCharCode(parseInt(arg, 10));\n                    break;\n                case 'd': // Integer\n                case 'i':\n                    arg = typeof arg === 'bigint' ? arg.toString() : Math.trunc(Number(arg)); // eslint-disable-line valid-typeof\n                    break;\n                case 'j': // JSON\n                    arg = JSON.stringify(arg, null, placeholder.width ? parseInt(placeholder.width) : 0);\n                    break;\n                case 'e': // Exponential notation\n                    arg = placeholder.precision ? parseFloat(arg).toExponential(placeholder.precision) : parseFloat(arg).toExponential();\n                    break;\n                case 'f': // Fixed-point\n                    arg = placeholder.precision ? parseFloat(arg).toFixed(placeholder.precision) : parseFloat(arg);\n                    break;\n                case 'g': // General format\n                    arg = placeholder.precision ? String(arg.toPrecision(placeholder.precision)) : parseFloat(arg);\n                    break;\n                case 'o': // Octal\n                    arg = (parseInt(arg, 10) >>> 0).toString(8);\n                    break;\n                case 's': // String\n                    arg = String(arg);\n\n                    arg = (placeholder.precision ? arg.substring(0, placeholder.precision) : arg);\n                    break;\n                case 't': // Boolean\n                    arg = String(!!arg);\n\n                    arg = (placeholder.precision ? arg.substring(0, placeholder.precision) : arg);\n                    break;\n                case 'T': // Type detection\n                    arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();\n\n                    arg = (placeholder.precision ? arg.substring(0, placeholder.precision) : arg);\n                    break;\n                case 'u': // Unsigned integer\n                    arg = parseInt(arg, 10) >>> 0;\n                    break;\n                case 'v': // Primitive value\n                    arg = String(arg.valueOf());\n\n                    arg = (placeholder.precision ? arg.substring(0, placeholder.precision) : arg);\n                    break;\n                case 'x':\n                case 'X':\n                    hex = (parseInt(arg, 10) >>> 0).toString(16);\n\n                    if (arg && arg.high) {\n                        // Handle special objects with 'high' property (likely for 64-bit integers)\n                        hex = (parseInt(arg.high, 10) >>> 0).toString(16) + hex.padStart(8, '0');\n                    } else if (Number(arg) > MAX_INT32 || Number(arg) < MIN_INT32) {\n                        // Handle values outside 32-bit signed integer range using BigInt\n                        try {\n                            // Use BigInt for large number handling\n                            const bigIntValue = BigInt(arg);\n                            const highBits = bigIntValue >> BigInt(32);\n                            const highHex = (highBits & BigInt(MAX_UINT32)).toString(16);\n\n                            hex = highBits !== BigInt(0) ? highHex + hex.padStart(8, '0') : hex;\n                        } catch (e) {\n                            // Fallback if BigInt fails (e.g., on older browsers), keep the original hex value\n                        }\n                    }\n\n                    arg = placeholder.type === 'X' ? hex.toUpperCase() : hex;\n                    break;\n                default:\n                    throw new Error(`[sprintf] Unknown type: ${placeholder.type}`);\n            }\n\n            // Apply padding and alignment\n            if (re.jsonObject.test(placeholder.type)) {\n                output += arg;\n            } else {\n                // Handle numeric sign prefix\n                if (re.number.test(placeholder.type) && (!isPositive || placeholder.numeralPrefix)) {\n                    numeralPrefix = isPositive ? '+' : '-';\n\n                    arg = String(arg).replace(re.numeralPrefix, '');\n                } else {\n                    numeralPrefix = '';\n                }\n\n                const padCharacter = placeholder.padChar ? placeholder.padChar === '0' ? '0' : placeholder.padChar.charAt(1) : ' ';\n\n                const padLength = placeholder.width - (numeralPrefix + arg).length;\n\n                const pad = placeholder.width && padLength > 0 ? stringRepeat(padCharacter, padLength) : ''; // padCharacter.repeat(padLength) replaced in favor of custom function\n\n                output += placeholder.align ? numeralPrefix + arg + pad : (padCharacter === '0' ? numeralPrefix + pad + arg : pad + numeralPrefix + arg);\n            }\n        }\n\n        return output;\n    }\n\n    /**\n     * Parses format string into executable tree structure\n     * @param {string} format - Format string to parse\n     * @returns {{parseTree: Array<string|Placeholder>, namedUsed: boolean, positionalUsed: boolean}}\n     * @throws {SyntaxError} On invalid format syntax\n     */\n    function sprintfParse(format) {\n        if (sprintfCache.has(format)) {\n            return sprintfCache.get(format);\n        }\n\n        let _format = format;\n        const parseTree = [];\n        let namedUsed = false;\n        let positionalUsed = false;\n\n        while (_format) {\n            let match;\n\n            // Match plain text between placeholders\n            if ((match = re.plainText.exec(_format)) !== null) {\n                parseTree.push(match[0]);\n            }\n            // Match escaped percent (%%)\n            else if ((match = re.doublePercent.exec(_format)) !== null) {\n                parseTree.push('%');\n            }\n            // Match complex placeholders\n            else if ((match = re.placeholder.exec(_format)) !== null) {\n                // Handle named arguments\n                if (match[2]) {\n                    namedUsed = true;\n                    const fieldList = [];\n                    let replacementField = match[2];\n                    let fieldMatch;\n\n                    if ((fieldMatch = re.namedKey.exec(replacementField)) !== null) {\n                        if (!re.allowedNamedKeyChars.test(fieldMatch[1])) {\n                            throw new SyntaxError('[sprintf] Invalid named argument key segment: must start with a letter or underscore, followed by letters, numbers, or underscores');\n                        }\n\n                        fieldList.push(fieldMatch[1]);\n\n                        while ((replacementField = replacementField.substring(fieldMatch[0].length)) !== '') {\n                            if ((fieldMatch = re.dotAccess.exec(replacementField)) !== null) {\n                                if (!re.allowedNamedKeyChars.test(fieldMatch[1])) {\n                                    throw new SyntaxError('[sprintf] Invalid named argument key segment after dot: must start with a letter or underscore, followed by letters, numbers, or underscores');\n                                }\n\n                                fieldList.push(fieldMatch[1]);\n                            } else if ((fieldMatch = re.bracketAccess.exec(replacementField)) !== null) {\n                                if (!re.allowedNumericIndex.test(fieldMatch[1])) { // Ensure index is a number\n                                    throw new SyntaxError('[sprintf] Invalid array index in named argument key: must be a non-negative integer');\n                                }\n\n                                fieldList.push(fieldMatch[1]);\n                            } else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key');\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key');\n                    }\n\n                    match[2] = fieldList;\n                }\n                // Handle positional arguments\n                else if (match[1]) { // Explicit positional placeholder\n                    positionalUsed = true;\n                }\n                else { // Implicit positional placeholder\n                    positionalUsed = true;\n                }\n\n                parseTree.push({\n                    placeholder: match[0],\n                    paramNo: match[1],\n                    keys: match[2],\n                    numeralPrefix: match[3],\n                    padChar: match[4],\n                    align: match[5],\n                    width: match[6],\n                    precision: match[7],\n                    type: match[8]\n                });\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder');\n            }\n\n            _format = _format.substring(match[0].length);\n        }\n\n        const result = {\n            parseTree,\n            namedUsed,\n            positionalUsed\n        };\n\n        sprintfCache.set(format, result);\n\n        return result;\n    }\n\n    /**\n     * Copies the values of all of the enumerable own properties from one or\n     * more source objects to a target object. It will return the target object.\n     * @param {object} target The target object to apply the sources' properties to.\n     * @param {...object} sources The source object(s) from which to copy properties.\n     * @returns {object} The target object.\n     * @throws {TypeError} If target is null or undefined.\n     * @throws {TypeError} If no arguments are provided.\n     */\n    function objectAssign(target) {\n        if (arguments.length < 1) {\n            throw new TypeError('objectAssign expects at least one argument');\n        }\n\n        if (target === null || target === undefined) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        for (let idx = 1; idx < arguments.length; idx++) {\n            const source = arguments[idx];\n\n            if (source === null || source === undefined) {\n                continue;\n            }\n\n            for (const key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) { // Only copy properties that are directly on the source object (not inherited)\n                    target[key] = source[key];\n                }\n            }\n        }\n\n        return target;\n    }\n\n    /**\n     * Constructs and returns a new string which contains the specified number\n     * of copies of the string on which it was called, concatenated together.\n     * @param {string} character The string to be repeated.\n     * @param {number} count An integer indicating the number of times to repeat the string.\n     * @returns {string} A new string containing the specified number of copies of the given character.\n     * @throws {RangeError} If count is negative.\n     */\n    function stringRepeat(character, count) {\n        if (count < 0) {\n            throw new RangeError('Repeat count must be non-negative');\n        }\n\n        if (count === 0) {\n            return '';\n        }\n\n        let result = '';\n\n        while (count) {\n            if (count & 1) { // Bitwise operations to handle count\n                result += character;\n            }\n\n            count >>= 1; // Bitwise right shift (equivalent to count = Math.floor(count / 2))\n\n            character += character;\n        }\n\n        return result;\n    }\n\n    /**\n     * Creates and returns a simple cache object.\n     * @returns {object} An object with methods for managing a cache.\n     */\n    function createCache() {\n        let cache = { __proto__: null };\n\n        return {\n            /**\n             * Retrieves a value from the cache.\n             * @param {string} key The key of the value to retrieve.\n             * @returns {*} The value associated with the key, or undefined if not found.\n             */\n            get: function (key) {\n                return cache[key];\n            },\n            /**\n             * Stores a value in the cache.\n             * @param {string} key The key to store the value under.\n             * @param {*} value The value to store.\n             * @returns {this} The cache object for chaining.\n             */\n            set: function (key, value) {\n                cache[key] = value;\n\n                return this;\n            },\n            /**\n             * Checks if a key exists in the cache.\n             * @param {string} key The key to check for.\n             * @returns {boolean} True if the key exists in the cache, false otherwise.\n             */\n            has: function (key) {\n                return key in cache;\n            },\n            /**\n             * Removes a key and its associated value from the cache.\n             * @param {string} key The key to remove.\n             */\n            delete: function (key) {\n                delete cache[key];\n            },\n            /**\n             * Clears all entries from the cache.\n             */\n            clear: function () {\n                cache = { __proto__: null };\n            }\n        };\n    }\n\n    sprintf.config = config;\n    vsprintf.config = config;\n\n    // Module export setup\n    const sprintfLib = {\n        sprintf: sprintf,\n        vsprintf: vsprintf,\n        config: config\n    };\n\n    // Browser global export\n    if (typeof window !== 'undefined') {\n        window.sprintf = sprintf;\n        window.vsprintf = vsprintf;\n\n        // AMD module definition\n        if (typeof define === 'function' && define.amd) {\n            define(() => sprintfLib);\n        }\n    }\n\n    // CommonJS export\n    if (typeof exports !== 'undefined') {\n        exports.sprintf = sprintf;\n        exports.vsprintf = vsprintf;\n    }\n\n    // Node.js module export\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = sprintfLib;\n    }\n}();\n"]}